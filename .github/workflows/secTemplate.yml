name: Semgrep

on:
  workflow_call:
    inputs:
      codeScannerRef:
        required: false
        type: string
        default: 'main'

jobs:
  semgrep:
    name: semgrep
    permissions:
      contents: read 
      actions: read
      security-events: write 
    runs-on: ubuntu-latest
    container:
      image: kondukto/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Fetch project source with GitHub Actions Checkout.
        uses: actions/checkout@v3
      - name: Pull semgrep rule repo
        run: |
          git clone https://github.com/Security-Template/sec-template.git
          cd sec-template
          git checkout ${{ inputs.codeScannerRef }}
          cp -r * ../
          cd ..
          rm -rf sec-template/
      - name: Generate 1 semgrep config named `semgrepRulles.yml`
        run: |
          pip install pyyaml awscli
          python scripts/config_combiner.py
      - name: Run semgrep
        run: |
          semgrep ci --sarif -o temp_results.sarif --config semgrep_rules/semgrepRulles.yml
          cat temp_results.sarif 
        
  secret_detection:
    name: gitleaks
    runs-on: ubuntu-latest
    container:
      image: golang:1.19.0
    if: (github.actor != 'dependabot[bot]') # Skip any PR created by dependabot to avoid permission issues
    steps:
      - name: Fetch project source with GitHub Actions Checkout.
        uses: actions/checkout@v3
      - name: Install gitleaks
        run: |
          git clone https://github.com/zricethezav/gitleaks.git
          cd gitleaks
          make build
          mv gitleaks /usr/local/bin
          cd ..
          rm -rf gitleaks
      - name: Run gitleaks secret detection scan
        run: |
          gitleaks detect --no-git -f sarif -r gitleaks_report.sarif 
          cat gitleaks_report.sarif 

  dependency_scanner:
    name: gemnasium
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/security-products/gemnasium
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Fetch project source with GitHub Actions Checkout.
        uses: actions/checkout@v3
      - name: Run Analyzer
        run: /analyzer run
      - name: Show results
        run: |
          apk add jq
          cat gl-dependency-scanning-report.json | jq '.vulnerabilities[].cve'
      - name: Check Results
        run: |
          NUM=$(cat gl-dependency-scanning-report.json | jq '.vulnerabilities[].cve' | wc -l)
          if [ $NUM == 0 ];then 
            echo "Scan ended without any result" 
          else
            echo "Scan found vulnerable dependencies"
            echo "Full report is:"
            cat gl-dependency-scanning-report.json
            exit 1
          fi
